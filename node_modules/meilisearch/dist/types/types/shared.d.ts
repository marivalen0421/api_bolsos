import type { RecordAny } from "./types.js";
export type CursorResults<T> = {
    results: T[];
    limit: number;
    from: number;
    next: number;
    total: number;
};
export type NonNullableDeepRecordValues<T> = {
    [P in keyof T]: T[P] extends any[] ? Array<NonNullableDeepRecordValues<T[P][number]>> : T[P] extends RecordAny ? NonNullableDeepRecordValues<T[P]> : NonNullable<T[P]>;
};
export type PascalToCamelCase<S extends string> = Uncapitalize<S>;
export type SafeOmit<T, K extends keyof T> = Omit<T, K>;
export type OptionStarOr<T> = "*" | T | null;
export type OptionStarOrList<T extends any[]> = ["*"] | T | null;
//# sourceMappingURL=shared.d.ts.map